import React from 'react';
import { Alert, AlertIcon, AlertTitle, AlertDescription, Box, Button, Code, Collapse, VStack, Text, Badge, Divider } from '@chakra-ui/react';
import { testEnvironment } from '../lib/supabase-bedrock-client';

/**
 * Component that displays detailed error information for Supabase Edge Function errors
 * with diagnostics and recommended actions
 */
export function EdgeFunctionErrorNotice({ error, onRefresh, ...props }) {
  const [isExpanded, setIsExpanded] = React.useState<any>(false);
  const [diagnostics, setDiagnostics] = React.useState<any>(null);
  const [isLoading, setIsLoading] = React.useState<any>(false);
  
  // Determine error type and provide appropriate guidance
  const errorInfo = React.useMemo(() => {
    if (!error) return null;
    
    // Default error info
    let info = {
      title: 'API Error',
      description: error.message || 'An unknown error occurred while connecting to the API.',
      severity: 'error',
      code: error.code || 'UNKNOWN_ERROR',
      actions: []
    };
    
    // Check for special error cases
    if (error.code === 'BOOT_ERROR' || error.message?.includes('Failed to instantiate module') 
        || error.message?.includes('does not provide an export named')) {
      info.title = 'Server Module Error';
      info.description = 'The server module failed to load due to a missing export or import error.';
      info.severity = 'error';
      info.details = 'This typically happens when the Edge Function has an issue with module imports. The server needs to be updated to fix the module export names.';
interface EdgeFunctionErrorNoticeProps {}

      info.actions = [
        { label: 'Run Diagnostics', action: 'diagnose' },
        { label: 'Use Fallback Data', action: 'fallback' }
      ];
    } else if (error.code === 'UNAUTHORIZED' || error.status === 401) {
      info.title = 'Authentication Error';
      info.description = 'Your session may have expired or authentication failed.';
      info.severity = 'warning';
      info.details = 'The server rejected the authentication token. This could be due to an expired session or a formatting issue with the token.';
      info.actions = [
        { label: 'Run Diagnostics', action: 'diagnose' },
        { label: 'Sign In Again', action: 'signin' }
      ];
    } else if (error.code === 'FUNCTION_INVOCATION_TIMEOUT' || error.status === 504) {
      info.title = 'API Timeout';
      info.description = 'The server took too long to respond.';
      info.severity = 'warning';
      info.details = 'The Supabase Edge Function timed out. This could indicate a server error or high load.';
      info.actions = [
        { label: 'Run Diagnostics', action: 'diagnose' },
        { label: 'Try Again', action: 'retry' }
      ];
    } else if (error.code === 'SERVICE_UNAVAILABLE' || error.status === 503) {
      info.title = 'Service Unavailable';
      info.description = 'The API service is currently unavailable.';
      info.severity = 'warning';
      info.details = 'The Supabase Edge Function service is temporarily down or under maintenance.';
      info.actions = [
        { label: 'Run Diagnostics', action: 'diagnose' },
        { label: 'Use Fallback Data', action: 'fallback' }
      ];
    }
    
    return info;
  }, [error]);
  
  // Run diagnostics
  const runDiagnostics = async (): Promise<void> => {
    if (isLoading) return;
    
    setIsLoading(true);
    try {
      const result = await testEnvironment({
        skipAuth: errorInfo.code === 'UNAUTHORIZED',
        useDiagnosticEndpoint: true
      });
      setDiagnostics(result);
      setIsExpanded(true);
    } catch (e) {
      console.error('Diagnostics failed:', e);
      setDiagnostics({
        success: false,
        message: `Diagnostics failed: ${e.message}`,
        error: e
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle action buttons
  const handleAction = (action): void => {
    switch (action) {
      case 'diagnose':
        runDiagnostics();
        break;
      case 'retry':
      case 'fallback':
        if (onRefresh) onRefresh(action);
        break;
      case 'signin':
        // Redirect to sign-in page or trigger auth flow
        window.location.href = '/login';
        break;
      default:
        break;
    }
  };
  
  if (!error || !errorInfo) return null;
  
  return (
    <Alert 
      status={errorInfo.severity}
      variant="subtle"
      flexDirection="column"
      alignItems="start"
      borderRadius="md"
      py={4}
      px={5}
      {...props}
    >
      <AlertIcon />
      <Box w="100%">
        <AlertTitle mb={1} fontSize="lg" display="flex" alignItems="center">
          {errorInfo.title}
          {errorInfo.code && (
            <Badge ml={2} colorScheme={errorInfo.severity === 'error' ? 'red' : 'orange'}>
              {errorInfo.code}
            </Badge>
          )}
        </AlertTitle>
        <AlertDescription>
          <Text>{errorInfo.description}</Text>
          
          {errorInfo.details && (
            <Text mt={2} fontSize="sm" color="gray.600">
              {errorInfo.details}
            </Text>
          )}
          
          {/* Action buttons */}
          {errorInfo.actions && errorInfo.actions.length > 0 && (
            <Box mt={3} display="flex" gap={2}>
              {errorInfo.actions.map((action) => (
                <Button 
                  key={action.action}
                  size="sm"
                  colorScheme={action.action === 'diagnose' ? 'blue' : 'gray'}
                  isLoading={isLoading && action.action === 'diagnose'}
                  onClick={() => handleAction(action.action)}
                >
                  {action.label}
                </Button>
              ))}
              
              {diagnostics && (
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => setIsExpanded(!isExpanded)}
                >
                  {isExpanded ? 'Hide Details' : 'Show Details'}
                </Button>
              )}
            </Box>
          )}
          
          {/* Diagnostic results */}
          {diagnostics && (
            <Collapse in={isExpanded} animateOpacity>
              <Box 
                mt={4}
                p={3}
                bg="gray.50"
                borderRadius="md"
                fontSize="sm"
                borderWidth="1px"
                borderColor="gray.200"
              >
                <VStack align="stretch" spacing={2}>
                  <Text fontWeight="bold">
                    Diagnostics Result: 
                    <Badge ml={2} colorScheme={diagnostics.success ? 'green' : 'red'}>
                      {diagnostics.success ? 'Success' : 'Failed'}
                    </Badge>
                  </Text>
                  
                  <Text>{diagnostics.message}</Text>
                  
                  {diagnostics.data && (
                    <>
                      <Divider my={1} />
                      <Text fontWeight="bold">API Response:</Text>
                      <Code p={2} borderRadius="md" fontSize="xs" whiteSpace="pre-wrap">
                        {JSON.stringify(diagnostics.data, null, 2)}
                      </Code>
                    </>
                  )}
                  
                  {!diagnostics.success && diagnostics.error && (
                    <>
                      <Divider my={1} />
                      <Text fontWeight="bold">Error Details:</Text>
                      <Code p={2} borderRadius="md" fontSize="xs" whiteSpace="pre-wrap">
                        {JSON.stringify(diagnostics.error, null, 2)}
                      </Code>
                    </>
                  )}
                </VStack>
              </Box>
            </Collapse>
          )}
        </AlertDescription>
      </Box>
    </Alert>
  );
} 