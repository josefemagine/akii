import React from "react";
var __awaiter = (this && this.__awaiter> || function (thisArg, _arguments, P, generator> {
    function adopt(value> { return value instanceof P ? value : new P(function (resolve> { resolve(value>; }>; }
    return new (P || (P = Promise>>(function (resolve, reject> {
        function fulfilled(value> { try { step(generator.next(value>>; } catch (e> { reject(e>; } }
        function rejected(value> { try { step(generator["throw"](value>>; } catch (e> { reject(e>; } }
        function step(result> { result.done ? resolve(result.value> : adopt(result.value>.then(fulfilled, rejected>; }
        step((generator = generator.apply(thisArg, _arguments || []>>.next(>>;
    }>;
};

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { CreditCard, Calendar, BarChart, ExternalLink, ArrowRight } from 'lucide-react';
import { billingProvider } from '@/lib/billing-providers';
import { useAuth } from '@/contexts/UnifiedAuthContext';
import { useToast } from '@/components/ui/use-toast';
interface BillingSectionProps {}

export default function BillingSection({ subscriptionData, plans }> {
    const navigate = useNavigate(>;
    const { user } = useAuth(>;
    const { toast } = useToast(>;
    const [loading, setLoading] = useState<any>(false>;
    const [billingCycle, setBillingCycle] = useState<any>((subscriptionData === null || subscriptionData === void 0 ? void 0 : subscriptionData.billingCycle> || 'monthly'>;
    // Get current plan details
    const currentPlan = plans.find(plan => plan.id === (subscriptionData === null || subscriptionData === void 0 ? void 0 : subscriptionData.planId>>;
    // Format date
    const formatDate = (date>: void => {
        if (!date>
            return 'N/A';
        return new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }>.format(date>;
    };
    // Format currency
    const formatCurrency = (amount>: void => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0
        }>.format(amount>;
    };
    // Handle opening customer portal
    const handleManageSubscription = (> => __awaiter(this, void 0, void 0, function* (> {
        if (!user>
            return;
        setLoading(true>;
        try {
            const { url } = yield billingProvider.createPortalSession({
                userId: user.id
            }>;
            // Redirect to Stripe Customer Portal
            window.location.href = url;
        }
        catch (error> {
            console.error('Failed to open customer portal:', error>;
            toast({
                title: 'Error',
                description: 'Failed to open customer portal. Please try again.',
                variant: 'destructive'
            }>;
        }
        finally {
            setLoading(false>;
        }
    }>;
    // Handle change plan
    const handleChangePlan = (> => __awaiter(this, void 0, void 0, function* (> {
        navigate('/plans'>;
    }>;
    // Compute status color
    const getStatusColor = (status>: void => {
        switch (status> {
            case 'active':
            case 'trialing':
                return 'bg-green-500/10 text-green-500 border-green-500/20';
            case 'past_due':
                return 'bg-amber-500/10 text-amber-500 border-amber-500/20';
            case 'canceled':
            case 'unpaid':
            case 'incomplete':
                return 'bg-destructive/10 text-destructive border-destructive/20';
            default:
                return 'bg-muted text-muted-foreground border-muted';
        }
    };
    return (<Card, { className: "mb-8", children: [<CardHeader, { children: <"div", { className: "flex items-center justify-between", children: [<"div", { children: [<CardTitle, { children: "Subscription Details" }>, <CardDescription, { children: "Manage your subscription and billing settings" }>] }>, (subscriptionData === null || subscriptionData === void 0 ? void 0 : subscriptionData.status> && (<Badge, { variant: "outline", className: getStatusColor(subscriptionData.status>, children: subscriptionData.status.charAt(0>.toUpperCase(> + subscriptionData.status.slice(1> }>>] }> }>, <CardContent, { className: "space-y-6", children: currentPlan ? (<"div", { className: "grid md:grid-cols-2 gap-6", children: [<"div", { className: "space-y-4", children: [<"div", { className: "space-y-1", children: [<"h3", { className: "text-lg font-semibold", children: "Current Plan" }>, <"p", { className: "text-muted-foreground", children: [currentPlan.name, " (", billingCycle === 'annual' ? 'Annual' : 'Monthly', ">"] }>] }>, <"div", { className: "flex items-center gap-2", children: [<CreditCard, { className: "h-4 w-4 text-muted-foreground" }>, <"span", { children: [formatCurrency(billingCycle === 'annual' ? currentPlan.priceAnnual / 12 : currentPlan.priceMonthly>, ' ', "/ month", ' ', billingCycle === 'annual' && (<"span", { className: "text-muted-foreground text-sm", children: ["(billed annually at ", formatCurrency(currentPlan.priceAnnual>, ">"] }>>] }>] }>, <"div", { className: "flex items-center gap-2", children: [<Calendar, { className: "h-4 w-4 text-muted-foreground" }>, <"span", { children: subscriptionData.cancelAtPeriodEnd
                                                ? `Cancels on ${formatDate(subscriptionData.currentPeriodEnd>}`
                                                : `Renews on ${formatDate(subscriptionData.currentPeriodEnd>}` }>] }>, <"div", { className: "flex items-center gap-2", children: [<BarChart, { className: "h-4 w-4 text-muted-foreground" }>, <"span", { children: [currentPlan.messageLimit.toLocaleString(>, " messages / month"] }>] }>] }>, <"div", { className: "flex flex-col justify-center space-y-4", children: [<"div", { className: "flex flex-col items-center justify-center space-y-2 p-4 border rounded-md border-dashed", children: [<"div", { className: "flex items-center space-x-2", children: [<Switch, { id: "billing-cycle", checked: billingCycle === 'annual', disabled: !subscriptionData || subscriptionData.status !== 'active', onCheckedChange: (> => {
                                                        const newCycle = billingCycle === 'annual' ? 'monthly' : 'annual';
                                                        setBillingCycle(newCycle>;
                                                        // This would normally trigger an update, but we're navigating to the customer portal instead
                                                    } }>, <Label, { htmlFor: "billing-cycle", children: "Annual billing (save 16%>" }>] }>, <"p", { className: "text-sm text-muted-foreground text-center", children: billingCycle === 'annual'
                                                ? 'You are saving 16% with annual billing'
                                                : 'Switch to annual billing and save 16%' }>] }>, <"div", { className: "flex flex-col space-y-2", children: [<Button, { onClick: handleManageSubscription, disabled: loading, className: "w-full", children: [loading ? 'Loading...' : 'Manage Subscription', <ExternalLink, { className: "ml-2 h-4 w-4" }>] }>, <Button, { onClick: handleChangePlan, variant: "outline", className: "w-full", children: ["Change Plan", <ArrowRight, { className: "ml-2 h-4 w-4" }>] }>] }>] }>] }>> : (<"div", { className: "text-center py-8", children: [<"p", { className: "text-muted-foreground mb-4", children: "You don't have an active subscription" }>, <Button, { onClick: handleChangePlan, children: ["View Plans", <ArrowRight, { className: "ml-2 h-4 w-4" }>] }>] }>> }>] }>>;
}
