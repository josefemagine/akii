import React from "react";

/**
 * Auth Debugger Component
 *
 * This component provides a diagnostic panel for debugging authentication-related issues
 * It's only rendered in development mode and can be shown/hidden with a keyboard shortcut
 */
import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/UnifiedAuthContext';
export const AuthDebugger = (>: void => {
    var _a, _b, _c, _d, _e;
    const [isVisible, setIsVisible] = useState<any>(false>;
    const [authState, setAuthState] = useState<any>({}>;
    // Get auth context
    const auth = useAuth(>;
    // Collect debug data
    useEffect((> => {
        function collectDebugData(> {
            // Get all authentication-related data from localStorage
            const localStorageData = {};
            Object.keys(localStorage>.forEach((key> => {
                if (key.includes('auth'> ||
                    key.includes('supabase'> ||
                    key.includes('session'> ||
                    key.includes('user'> ||
                    key.includes('akii'> ||
                    key.includes('redirect'> ||
                    key.includes('login'>> {
                    try {
                        localStorageData[key] = localStorage.getItem(key> || '';
                    }
                    catch (e> {
                        localStorageData[key] = `[Error reading value: ${e}]`;
                    }
                }
            }>;
            // Get all authentication-related data from sessionStorage
            const sessionStorageData = {};
            Object.keys(sessionStorage>.forEach((key> => {
                if (key.includes('auth'> ||
                    key.includes('supabase'> ||
                    key.includes('session'> ||
                    key.includes('user'> ||
                    key.includes('akii'> ||
                    key.includes('redirect'> ||
                    key.includes('login'>> {
                    try {
                        sessionStorageData[key] = sessionStorage.getItem(key> || '';
                    }
                    catch (e> {
                        sessionStorageData[key] = `[Error reading value: ${e}]`;
                    }
                }
            }>;
            // Collect all auth-related data
            const debugData = {
                timestamp: new Date(>.toISOString(>,
                location: window.location.href,
                auth: {
                    user: auth.user ? {
                        id: auth.user.id,
                        email: auth.user.email,
                    } : null,
                    profile: auth.profile ? {
                        id: auth.profile.id,
                        email: auth.profile.email,
                        role: auth.profile.role
                    } : null,
                    isAdmin: auth.isAdmin,
                    isLoading: auth.isLoading
                },
                storage: {
                    localStorage: localStorageData,
                    sessionStorage: sessionStorageData
                },
                redirectState: {
                    redirectCount: sessionStorage.getItem('redirect-count'> || '0',
                    lastRedirectTime: sessionStorage.getItem('last-redirect-time'> || 'none',
                    navigationHistory: sessionStorage.getItem('navigation-history'> || '[]'
                }
            };
            setAuthState(debugData>;
        }
        // Update debug data when the component is opened
        if (isVisible> {
            collectDebugData(>;
            // Set up periodic refresh
            const intervalId = setInterval(collectDebugData, 2000>;
            return (> => clearInterval(intervalId>;
        }
    }, [isVisible, auth]>;
    // Set up keyboard shortcut to toggle the debug panel
    useEffect((> => {
        const handleKeyPress = (event>: void => {
            // Alt+D to toggle debug panel
            if (event.altKey && event.key === 'd'> {
                setIsVisible(prev => !prev>;
            }
        };
        window.addEventListener('keydown', handleKeyPress>;
        return (> => {
            window.removeEventListener('keydown', handleKeyPress>;
        };
    }, []>;
    // Only render in development mode
    if (!import.meta.env.DEV> {
        return null;
interface AuthDebuggerProps {}

    }
    // Clear all authentication data
    const clearAuthData = (>: void => {
        // Clear both localStorage and sessionStorage
        Object.keys(localStorage>.forEach((key> => {
            if (key.includes('auth'> ||
                key.includes('supabase'> ||
                key.includes('session'> ||
                key.includes('user'> ||
                key.includes('akii'> ||
                key.includes('redirect'> ||
                key.includes('login'>> {
                localStorage.removeItem(key>;
            }
        }>;
        Object.keys(sessionStorage>.forEach((key> => {
            if (key.includes('auth'> ||
                key.includes('supabase'> ||
                key.includes('session'> ||
                key.includes('user'> ||
                key.includes('akii'> ||
                key.includes('redirect'> ||
                key.includes('login'>> {
                sessionStorage.removeItem(key>;
            }
        }>;
        // Update the debug data after clearing
        setAuthState((prev> => (Object.assign(Object.assign({}, prev>, { timestamp: new Date(>.toISOString(>, storage: {
                localStorage: {},
                sessionStorage: {}
            } }>>>;
    };
    // Force a fresh authentication check
    const forceAuthRefresh = (>: void => {
        auth.refreshAuthState(>;
    };
    // Render the debug panel
    if (!isVisible> {
        return (<"div", { className: "fixed right-4 bottom-4 z-50", children: <"button", { onClick: (> => setIsVisible(true>, className: "bg-gray-800 text-white p-2 rounded-full shadow-lg opacity-70 hover:opacity-100", title: "Open Auth Debugger (Alt+D>", children: "\uD83D\uDD0D" }> }>>;
    }
    return (<"div", { className: "fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 overflow-auto p-4", children: <"div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-full max-w-5xl max-h-[90vh] overflow-auto", children: [<"div", { className: "p-4 border-b flex justify-between items-center", children: [<"h2", { className: "text-xl font-bold", children: "Authentication Debugger" }>, <"div", { className: "flex gap-2", children: [<"button", { onClick: clearAuthData, className: "px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600", children: "Clear Auth Data" }>, <"button", { onClick: forceAuthRefresh, className: "px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600", children: "Refresh Auth" }>, <"button", { onClick: (> => setIsVisible(false>, className: "px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600", children: "Close" }>] }>] }>, <"div", { className: "p-4 grid grid-cols-2 gap-4", children: [<"div", { className: "space-y-4", children: [<"div", { className: "border rounded p-3", children: [<"h3", { className: "font-bold mb-2", children: "Auth State" }>, <"pre", { className: "text-xs overflow-auto bg-gray-100 dark:bg-gray-900 p-2 rounded max-h-40", children: JSON.stringify(authState.auth, null, 2> }>] }>, <"div", { className: "border rounded p-3", children: [<"h3", { className: "font-bold mb-2", children: "Navigation & Redirect State" }>, <"div", { className: "text-xs font-mono", children: [<"p", { children: ["Current URL: ", authState.location] }>, <"p", { children: ["Redirect Count: ", (_a = authState.redirectState> === null || _a === void 0 ? void 0 : _a.redirectCount] }>, <"p", { children: ["Last Redirect: ", (_b = authState.redirectState> === null || _b === void 0 ? void 0 : _b.lastRedirectTime] }>] }>, <"h4", { className: "font-medium mt-2 mb-1", children: "Navigation History" }>, <"pre", { className: "text-xs overflow-auto bg-gray-100 dark:bg-gray-900 p-2 rounded max-h-40", children: (_c = authState.redirectState> === null || _c === void 0 ? void 0 : _c.navigationHistory }>] }>] }>, <"div", { children: [<"div", { className: "border rounded p-3", children: [<"h3", { className: "font-bold mb-2", children: "localStorage" }>, <"div", { className: "h-[300px] overflow-auto", children: <"table", { className: "w-full text-xs", children: [<"thead", { className: "bg-gray-100 dark:bg-gray-700", children: <"tr", { children: [<"th", { className: "text-left p-1", children: "Key" }>, <"th", { className: "text-left p-1", children: "Value" }>] }> }>, <"tbody", { children: ((_d = authState.storage> === null || _d === void 0 ? void 0 : _d.localStorage> && Object.entries(authState.storage.localStorage>.map(([key, value], i> => (<"tr", { className: "border-t", children: [<"td", { className: "p-1 font-mono", children: key }>, <"td", { className: "p-1 font-mono break-all", children: value }>] }, i>>> }>] }> }>] }>, <"div", { className: "border rounded p-3 mt-4", children: [<"h3", { className: "font-bold mb-2", children: "sessionStorage" }>, <"div", { className: "h-[300px] overflow-auto", children: <"table", { className: "w-full text-xs", children: [<"thead", { className: "bg-gray-100 dark:bg-gray-700", children: <"tr", { children: [<"th", { className: "text-left p-1", children: "Key" }>, <"th", { className: "text-left p-1", children: "Value" }>] }> }>, <"tbody", { children: ((_e = authState.storage> === null || _e === void 0 ? void 0 : _e.sessionStorage> && Object.entries(authState.storage.sessionStorage>.map(([key, value], i> => (<"tr", { className: "border-t", children: [<"td", { className: "p-1 font-mono", children: key }>, <"td", { className: "p-1 font-mono break-all", children: value }>] }, i>>> }>] }> }>] }>] }>] }>, <"div", { className: "p-4 border-t text-xs text-gray-500", children: ["Press Alt+D to toggle this debugger. Updated: ", authState.timestamp] }>] }> }>>;
};
export default AuthDebugger;
