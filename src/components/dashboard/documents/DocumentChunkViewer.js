import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { FileText, Edit, Trash2 } from "lucide-react";
const DocumentChunkViewer = ({ documentId, documentName = "Untitled Document", chunks = [], onEditChunk = () => { }, onDeleteChunk = () => { }, }) => {
    const [selectedChunkId, setSelectedChunkId] = useState(chunks.length > 0 ? chunks[0].id : null);
    const selectedChunk = chunks.find((chunk) => chunk.id === selectedChunkId);
    return (_jsxs(Card, { className: "w-full bg-white shadow-sm border-gray-100", children: [_jsxs(CardHeader, { className: "pb-2", children: [_jsxs(CardTitle, { className: "text-xl font-bold flex items-center gap-2", children: [_jsx(FileText, { className: "h-5 w-5 text-primary" }), documentName] }), _jsxs(CardDescription, { children: ["Document has been processed into ", chunks.length, " chunks for training"] })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "md:col-span-1 border rounded-md", children: [_jsx("div", { className: "p-3 border-b bg-gray-50", children: _jsx("h3", { className: "font-medium", children: "Document Chunks" }) }), _jsx(ScrollArea, { className: "h-[400px]", children: _jsx("div", { className: "p-2", children: chunks.map((chunk) => (_jsxs("div", { className: `p-3 mb-2 rounded-md cursor-pointer hover:bg-gray-50 ${selectedChunkId === chunk.id ? "bg-gray-100 border border-gray-200" : ""}`, onClick: () => setSelectedChunkId(chunk.id), children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs(Badge, { variant: "outline", children: ["Chunk ", chunk.metadata.chunk_index + 1, " of", " ", chunk.metadata.total_chunks] }), _jsx(Button, { variant: "ghost", size: "icon", onClick: (e) => {
                                                                e.stopPropagation();
                                                                onDeleteChunk(chunk.id);
                                                            }, children: _jsx(Trash2, { className: "h-4 w-4 text-gray-500" }) })] }), _jsxs("p", { className: "mt-2 text-sm text-gray-600 line-clamp-2", children: [chunk.content.substring(0, 100), "..."] })] }, chunk.id))) }) })] }), _jsxs("div", { className: "md:col-span-2 border rounded-md", children: [_jsxs("div", { className: "p-3 border-b bg-gray-50 flex justify-between items-center", children: [_jsx("h3", { className: "font-medium", children: selectedChunk
                                                ? `Chunk ${selectedChunk.metadata.chunk_index + 1} Content`
                                                : "Select a chunk to view" }), selectedChunk && (_jsx("div", { className: "flex gap-2", children: _jsxs(Button, { variant: "outline", size: "sm", onClick: () => onEditChunk(selectedChunk.id, selectedChunk.content), children: [_jsx(Edit, { className: "h-4 w-4 mr-2" }), " Edit"] }) }))] }), _jsx(ScrollArea, { className: "h-[400px]", children: _jsx("div", { className: "p-4", children: selectedChunk ? (_jsx("div", { className: "whitespace-pre-wrap font-mono text-sm", children: selectedChunk.content })) : (_jsx("div", { className: "flex items-center justify-center h-full text-gray-500", children: _jsx("p", { children: "Select a chunk to view its content" }) })) }) })] })] }) })] }));
};
export default DocumentChunkViewer;
