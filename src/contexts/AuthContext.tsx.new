import React, { createContext, useContext, useEffect, useState } from "react";
import {
  supabase,
  getCurrentSession,
  handleHashRedirect,
  checkSessionPersistence,
  isBrowser,
} from "@/lib/supabase";
import type { User as SupabaseUser, Session } from "@supabase/supabase-js";
import { useNavigate, useLocation } from "react-router-dom";
import { useToast } from "@/components/ui/use-toast";
import type { Database } from "@/types/supabase";

export type UserRole = "user" | "admin" | "team_member";

type Profile = Database["public"]["Tables"]["profiles"]["Row"];
type ProfileUpsert = Database["public"]["Tables"]["profiles"]["Insert"];
type SubscriptionUpsert = Database["public"]["Tables"]["subscriptions"]["Insert"];

// Update the Subscription type to match the database schema
interface Subscription {
  id: string;
  user_id: string;
  plan: "free" | "pro" | "enterprise";
  status: "active" | "inactive" | "trial" | "cancelled" | "expired";
  message_limit: number;
  messages_used: number;
  trial_ends_at: string | null;
  renews_at: string | null;
  addons: Record<string, any>;
  payment_method: string | null;
  created_at: string;
  updated_at: string;
}

// Create a separate type for our extended user
export interface ExtendedUser {
  id: string;
  email: string;
  role: UserRole;
  subscription: Subscription;
  created_at: string;
  updated_at: string;
  aud: string;
  app_metadata: Record<string, any>;
  user_metadata: Record<string, any>;
}

// Update the User type to be our ExtendedUser
export type User = ExtendedUser;

interface AuthContextType {
  user: User | null;
  session: Session | null;
  isLoading: boolean;
  userRole: UserRole | null;
  isAdmin: boolean;
  signIn: (
    email: string,
    password: string,
  ) => Promise<{
    error: Error | null;
    data: { user: User | null } | null;
  }>;
  signUp: (
    email: string,
    password: string,
  ) => Promise<{
    error: Error | null;
    data: { user: User | null } | null;
  }>;
  signInWithGoogle: () => Promise<void>;
  verifyOtp: (
    email: string,
    token: string,
  ) => Promise<{
    error: Error | null;
    data: { user: User | null } | null;
  }>;
  resetPassword: (email: string) => Promise<{
    error: Error | null;
    data: any;
  }>;
  confirmPasswordReset: (
    email: string,
    token: string,
    newPassword: string,
  ) => Promise<{
    error: Error | null;
    data: any;
  }>;
  signOut: () => Promise<void>;
  refreshSession: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Using function declaration for consistent component exports with Fast Refresh
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

// Update the upsertProfile function
const upsertProfile = async (userId: string, email: string) => {
  // First, upsert the profile
  const profileData = {
    id: userId,
    email: email,
    role: "user" as const,
    updated_at: new Date().toISOString()
  } satisfies ProfileUpsert;

  const { error: profileError } = await supabase
    .from("profiles")
    .upsert(profileData, {
      onConflict: 'id'
    });

  if (profileError) {
    console.error("Error upserting profile:", profileError);
    return { error: profileError };
  }

  // Then, upsert the subscription
  const subscriptionData = {
    user_id: userId,
    plan: "free" as const,
    status: "active" as const,
    message_limit: 1000,
    messages_used: 0,
    trial_ends_at: null,
    renews_at: null,
    addons: {},
    payment_method: null,
    updated_at: new Date().toISOString()
  } satisfies SubscriptionUpsert;

  const { error: subscriptionError } = await supabase
    .from("subscriptions")
    .upsert(subscriptionData, {
      onConflict: 'user_id'
    });

  return { error: subscriptionError };
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const navigate = useNavigate();
  const location = useLocation();
  const { toast } = useToast();

  const fetchUserProfile = async (userId: string) => {
    try {
      const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", userId)
        .single();

      if (profileError) throw profileError;

      const { data: subscription, error: subscriptionError } = await supabase
        .from("subscriptions")
        .select("*")
        .eq("user_id", userId)
        .single();

      if (subscriptionError) throw subscriptionError;

      return {
        ...profile,
        subscription,
      };
    } catch (error) {
      console.error("Error fetching user profile:", error);
      return null;
    }
  };

  // Update the createDefaultUser function
  const createDefaultUser = (sessionUser: SupabaseUser): User => {
    const defaultSubscription: Subscription = {
      id: sessionUser.id,
      user_id: sessionUser.id,
      plan: "free",
      status: "active",
      message_limit: 1000,
      messages_used: 0,
      trial_ends_at: null,
      renews_at: null,
      addons: {},
      payment_method: null,
      created_at: sessionUser.created_at,
      updated_at: sessionUser.updated_at
    };

    const user: User = {
      id: sessionUser.id,
      email: sessionUser.email || "",
      role: "user" as UserRole,
      subscription: defaultSubscription,
      created_at: sessionUser.created_at,
      updated_at: sessionUser.updated_at,
      aud: sessionUser.aud,
      app_metadata: sessionUser.app_metadata,
      user_metadata: sessionUser.user_metadata,
    };

    return user;
  };

  const updateUserWithProfile = async (sessionUser: SupabaseUser): Promise<User> => {
    try {
      const profile = await fetchUserProfile(sessionUser.id);
      const userWithRole = createDefaultUser(sessionUser);
      setUser(() => userWithRole);
      setUserRole(userWithRole.role);
      return userWithRole;
    } catch (error) {
      console.error("Error updating user with profile:", error);
      const defaultUser = createDefaultUser(sessionUser);
      return defaultUser;
    }
  };

  // ... rest of the existing code ... 