import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger, } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { SendIcon, MessagesSquare, BookOpenIcon } from "lucide-react";
export default function TelegramChat() {
    const [activeTab, setActiveTab] = useState("setup");
    const [agentStatus, setAgentStatus] = useState("draft");
    const [userCount, setUserCount] = useState(0);
    const [messageCount, setMessageCount] = useState(0);
    const [commandUsage, setCommandUsage] = useState(0);
    const [botToken, setBotToken] = useState("");
    const [botUsername, setBotUsername] = useState("");
    const [loading, setLoading] = useState(true);
    useEffect(() => {
        // Simulate loading data
        const timeout = setTimeout(() => {
            // Check if Telegram bot is deployed (simulate from localStorage)
            const isDeployed = localStorage.getItem("telegram_bot_deployed") === "true";
            if (isDeployed) {
                setAgentStatus("active");
                setUserCount(234);
                setMessageCount(895);
                setCommandUsage(67);
                setBotToken("5123456789:AAHn-xqIpFvTW8kRKz33hdfsgRmFg1qwerty");
                setBotUsername("AkiiAssistantBot");
            }
            setLoading(false);
        }, 1000);
        return () => clearTimeout(timeout);
    }, []);
    const handleConnect = () => {
        setLoading(true);
        // Simulate deployment process
        setTimeout(() => {
            setAgentStatus("active");
            setUserCount(1);
            setMessageCount(0);
            setCommandUsage(0);
            localStorage.setItem("telegram_bot_deployed", "true");
            setLoading(false);
        }, 1500);
    };
    return (_jsxs("div", { className: "container mx-auto py-6 space-y-8", children: [_jsxs("div", { className: "flex flex-col space-y-2", children: [_jsx("h1", { className: "text-3xl font-bold tracking-tight", children: "Telegram Chat Agent" }), _jsx("p", { className: "text-muted-foreground", children: "Connect with users through Telegram using an AI-powered chatbot that handles inquiries 24/7." })] }), _jsxs("div", { className: "grid gap-4 md:grid-cols-2 lg:grid-cols-2", children: [_jsxs(Card, { children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Telegram Bot Integration" }), _jsxs("div", { className: "flex items-center gap-2", children: [agentStatus === "draft" && (_jsx(Badge, { variant: "outline", className: "bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 hover:bg-amber-100 hover:dark:bg-amber-900/30", children: "Not Deployed" })), agentStatus === "active" && (_jsx(Badge, { variant: "outline", className: "bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 hover:bg-green-100 hover:dark:bg-green-900/30", children: "Deployed" }))] })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: "Telegram Bot API" }), agentStatus === "active" && (_jsxs("div", { className: "text-xs text-muted-foreground", children: ["Bot Username: @", botUsername] })), _jsxs("div", { className: "mt-4 grid grid-cols-3 gap-2", children: [_jsxs("div", { className: "col-span-1", children: [_jsx("div", { className: "text-xs text-muted-foreground", children: "Users" }), _jsx("div", { className: "text-xl font-bold", children: userCount })] }), _jsxs("div", { className: "col-span-1", children: [_jsx("div", { className: "text-xs text-muted-foreground", children: "Messages" }), _jsx("div", { className: "text-xl font-bold", children: messageCount })] }), _jsxs("div", { className: "col-span-1", children: [_jsx("div", { className: "text-xs text-muted-foreground", children: "Command Usage" }), _jsxs("div", { className: "text-xl font-bold", children: [commandUsage, "%"] })] })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Telegram Preview" }) }), _jsx(CardContent, { children: _jsx("div", { className: "rounded-lg border bg-muted p-3 dark:bg-muted/50", children: _jsxs("div", { className: "flex flex-col space-y-3", children: [_jsxs("div", { className: "flex items-start space-x-3", children: [_jsx("div", { className: "rounded-full bg-primary/10 p-2", children: _jsx(MessagesSquare, { className: "h-4 w-4 text-primary" }) }), _jsx("div", { className: "rounded-lg bg-muted-foreground/20 p-2", children: _jsx("p", { className: "text-sm", children: "/start" }) })] }), _jsx("div", { className: "flex items-start justify-end space-x-3", children: _jsx("div", { className: "rounded-lg bg-primary p-2", children: _jsx("p", { className: "text-sm text-primary-foreground", children: "Hello! I'm your AI assistant. I can help you with information, answer questions, or assist with tasks. How can I help you today?" }) }) }), _jsxs("div", { className: "flex items-start space-x-3", children: [_jsx("div", { className: "rounded-full bg-primary/10 p-2", children: _jsx(MessagesSquare, { className: "h-4 w-4 text-primary" }) }), _jsx("div", { className: "rounded-lg bg-muted-foreground/20 p-2", children: _jsx("p", { className: "text-sm", children: "What can you do?" }) })] })] }) }) })] })] }), _jsx("div", { className: "mt-6", children: _jsxs(Tabs, { defaultValue: "setup", value: activeTab, onValueChange: setActiveTab, children: [_jsxs(TabsList, { className: "mb-4", children: [_jsx(TabsTrigger, { value: "setup", children: "Setup" }), _jsx(TabsTrigger, { value: "analytics", children: "Analytics" }), _jsx(TabsTrigger, { value: "commands", children: "Bot Commands" })] }), _jsx(TabsContent, { value: "setup", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Connect Your Telegram Bot" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "botToken", children: "Telegram Bot Token" }), _jsx(Input, { id: "botToken", placeholder: "123456789:ABCDefGhIJKlmNoPQRsTUVwxyZ", value: botToken, onChange: (e) => setBotToken(e.target.value), disabled: agentStatus === "active", type: "password" }), _jsxs("p", { className: "text-sm text-muted-foreground", children: ["Enter the token from BotFather. Don't have a token? ", _jsx("a", { href: "https://t.me/botfather", target: "_blank", rel: "noopener noreferrer", className: "text-primary hover:underline", children: "Create one here" }), "."] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "botUsername", children: "Bot Username" }), _jsxs("div", { className: "flex items-center", children: [_jsx("span", { className: "bg-muted px-3 py-2 border border-r-0 rounded-l-md", children: "@" }), _jsx(Input, { id: "botUsername", placeholder: "YourBotName", value: botUsername, onChange: (e) => setBotUsername(e.target.value), disabled: agentStatus === "active", className: "rounded-l-none" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Enter your bot's username (without the @)." })] }), _jsxs("div", { className: "rounded-md bg-blue-50 dark:bg-blue-900/30 p-4 text-blue-800 dark:text-blue-200", children: [_jsx("h4", { className: "font-medium mb-1", children: "How to set up your Telegram bot" }), _jsxs("ol", { className: "list-decimal list-inside text-sm", children: [_jsx("li", { className: "mb-1", children: "Message @BotFather on Telegram" }), _jsx("li", { className: "mb-1", children: "Use the /newbot command to create a new bot" }), _jsx("li", { className: "mb-1", children: "Choose a name and username for your bot" }), _jsx("li", { className: "mb-1", children: "Copy the HTTP API token provided by BotFather" }), _jsx("li", { children: "Paste the token and username in the fields above" })] })] }), _jsx("div", { className: "pt-4", children: _jsx(Button, { onClick: handleConnect, disabled: loading || agentStatus === "active" || !botToken || !botUsername, children: loading ? "Connecting..." : agentStatus === "active" ? "Connected" : "Connect Telegram Bot" }) })] })] }) }), _jsx(TabsContent, { value: "analytics", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Bot Analytics" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Total Users" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: userCount }), _jsx("p", { className: "text-xs text-muted-foreground", children: "+15% from last month" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Total Messages" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold", children: messageCount }), _jsx("p", { className: "text-xs text-muted-foreground", children: "+30% from last month" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium", children: "Command Usage" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold", children: [commandUsage, "%"] }), _jsx("p", { className: "text-xs text-muted-foreground", children: "+5% from last month" })] })] })] }), _jsxs("div", { className: "rounded-lg border p-4", children: [_jsx("h3", { className: "text-sm font-medium mb-2", children: "Top Commands" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "/start" }), _jsx("span", { className: "text-sm font-medium", children: "45%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "/help" }), _jsx("span", { className: "text-sm font-medium", children: "22%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "/settings" }), _jsx("span", { className: "text-sm font-medium", children: "18%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "/info" }), _jsx("span", { className: "text-sm font-medium", children: "15%" })] })] })] })] }) })] }) }), _jsx(TabsContent, { value: "commands", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Bot Commands Configuration" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsx("p", { className: "text-sm text-muted-foreground", children: "Configure custom commands for your Telegram bot. These commands will be suggested to users when they type \"/\"." }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "p-3 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-medium", children: "/start" }), _jsx(Badge, { children: "Default" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Start the conversation with the bot" })] }), _jsxs("div", { className: "p-3 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-medium", children: "/help" }), _jsx(Badge, { children: "Default" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Show available commands and how to use them" })] }), _jsxs("div", { className: "p-3 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-medium", children: "/settings" }), _jsx(Badge, { children: "Custom" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Adjust your preferences for the bot" })] }), _jsxs("div", { className: "p-3 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("div", { className: "font-medium", children: "/info" }), _jsx(Badge, { children: "Custom" })] }), _jsx("p", { className: "text-sm text-muted-foreground", children: "Get information about the bot and its capabilities" })] })] }), _jsx("div", { className: "pt-3", children: _jsxs(Button, { variant: "outline", className: "w-full", children: [_jsx(SendIcon, { className: "mr-2 h-4 w-4" }), "Add New Command"] }) }), _jsxs("div", { className: "pt-4 border-t", children: [_jsx("h3", { className: "font-medium mb-2", children: "Apply to BotFather" }), _jsx("p", { className: "text-sm text-muted-foreground mb-2", children: "After configuring your commands, you need to update them with BotFather." }), _jsxs(Button, { variant: "outline", children: [_jsx(BookOpenIcon, { className: "mr-2 h-4 w-4" }), "View BotFather Instructions"] })] })] })] }) })] }) })] }));
}
