import React from "react";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { loadStripe } from '@stripe/stripe-js';
import { supabase } from './supabase';
// Load the Stripe.js script
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '');
interface stripe-clientProps {}

/**
 * Stripe client utility functions for handling billing operations
 */
export const stripeClient = {
    /**
     * Create a checkout session for subscription purchase
     * @param planId - The subscription plan ID
     * @param isBillingAnnual - Whether the billing cycle is annual
     * @returns The checkout URL to redirect to
     */
    createCheckoutSession(planId, isBillingAnnual) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Call the create-checkout endpoint
                const { data, error } = yield supabase.functions.invoke('stripe/create-checkout', {
                    body: {
                        planId,
                        billingCycle: isBillingAnnual ? 'annual' : 'monthly',
                    },
                });
                if (error)
                    throw error;
                if (!(data === null || data === void 0 ? void 0 : data.url))
                    throw new Error('No checkout URL returned');
                return data.url;
            }
            catch (error) {
                console.error('Error creating checkout session:', error);
                throw error;
            }
        });
    },
    /**
     * Create a portal session to manage subscription
     * @returns The billing portal URL to redirect to
     */
    createPortalSession() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase.functions.invoke('stripe/create-portal', {
                    body: {},
                });
                if (error)
                    throw error;
                if (!(data === null || data === void 0 ? void 0 : data.url))
                    throw new Error('No portal URL returned');
                return data.url;
            }
            catch (error) {
                console.error('Error creating portal session:', error);
                throw error;
            }
        });
    },
    /**
     * Update a subscription
     * @param planId - The new plan ID
     * @param isBillingAnnual - Whether to change to annual billing
     * @returns Success status
     */
    updateSubscription(planId, isBillingAnnual) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase.functions.invoke('stripe-api/update-subscription', {
                    body: {
                        planId,
                        billingCycle: isBillingAnnual ? 'annual' : 'monthly',
                    },
                });
                if (error)
                    throw error;
                return { success: true, data };
            }
            catch (error) {
                console.error('Error updating subscription:', error);
                throw error;
            }
        });
    },
    /**
     * Cancel a subscription
     * @param atPeriodEnd - Whether to cancel at the end of the billing period
     * @returns Success status
     */
    cancelSubscription() {
        return __awaiter(this, arguments, void 0, function* (atPeriodEnd = true) {
            try {
                const { data, error } = yield supabase.functions.invoke('stripe-api/cancel-subscription', {
                    body: {
                        atPeriodEnd,
                    },
                });
                if (error)
                    throw error;
                return { success: true, data };
            }
            catch (error) {
                console.error('Error canceling subscription:', error);
                throw error;
            }
        });
    },
    /**
     * Get customer's payment methods
     * @returns List of payment methods
     */
    getPaymentMethods() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase
                    .from('payment_methods')
                    .select('*')
                    .order('is_default', { ascending: false });
                if (error)
                    throw error;
                return data || [];
            }
            catch (error) {
                console.error('Error fetching payment methods:', error);
                throw error;
            }
        });
    },
    /**
     * Set default payment method
     * @param paymentMethodId - The payment method ID to set as default
     * @returns Success status
     */
    setDefaultPaymentMethod(paymentMethodId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase.functions.invoke('set-default-payment', {
                    body: {
                        paymentMethodId,
                    },
                });
                if (error)
                    throw error;
                return { success: true, data };
            }
            catch (error) {
                console.error('Error setting default payment method:', error);
                throw error;
            }
        });
    },
    /**
     * Get customer's invoices
     * @returns List of invoices
     */
    getInvoices() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase
                    .from('invoices')
                    .select('*')
                    .order('invoice_date', { ascending: false });
                if (error)
                    throw error;
                return data || [];
            }
            catch (error) {
                console.error('Error fetching invoices:', error);
                throw error;
            }
        });
    },
    /**
     * Get a specific invoice
     * @param invoiceId - The invoice ID
     * @returns Invoice details
     */
    getInvoice(invoiceId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase
                    .from('invoices')
                    .select('*')
                    .eq('id', invoiceId)
                    .single();
                if (error)
                    throw error;
                return data;
            }
            catch (error) {
                console.error('Error fetching invoice:', error);
                throw error;
            }
        });
    },
    /**
     * Get current subscription details
     * @returns Subscription details with plan information
     */
    getCurrentSubscription() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield supabase
                    .from('subscriptions')
                    .select(`
          *,
          plan:plan_id (
            id,
            name,
            description,
            price_monthly,
            price_yearly,
            message_limit,
            agent_limit,
            features
          )
        `)
                    .eq('status', 'active')
                    .single();
                if (error && error.code !== 'PGRST116')
                    throw error; // PGRST116 is "no rows returned"
                return data;
            }
            catch (error) {
                console.error('Error fetching current subscription:', error);
                throw error;
            }
        });
    }
};
